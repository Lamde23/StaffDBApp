@page "/Staff/edit"

@using Microsoft.EntityFrameworkCore
@using StaffDBFront.Models
@inject IDbContextFactory<StaffDBFront.Data.StaffDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Staff</h4>
<hr />
@if (Staff is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Staff" OnValidSubmit="UpdateStaff" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Staff.Id" value="@Staff.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Staff.FirstName" class="form-control" />
                    <ValidationMessage For="() => Staff.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Staff.LastName" class="form-control" />
                    <ValidationMessage For="() => Staff.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Staff.Email" class="form-control" />
                    <ValidationMessage For="() => Staff.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enrolleddate" class="form-label">EnrolledDate:</label>
                    <InputDate id="enrolleddate" @bind-Value="Staff.EnrolledDate" class="form-control" />
                    <ValidationMessage For="() => Staff.EnrolledDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="active" class="form-label">Active:</label>
                    <InputCheckbox id="active" @bind-Value="Staff.Active" class="form-check-input" />
                    <ValidationMessage For="() => Staff.Active" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bankaccount" class="form-label">BankAccount:</label>
                    <InputText id="bankaccount" @bind-Value="Staff.BankAccount" class="form-control" />
                    <ValidationMessage For="() => Staff.BankAccount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button> | 
                <a href="/staff" class="btn btn-outline-secondary">Back to List</a>
            </EditForm>
        </div>
    </div>
}

<div>
    
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Staff? Staff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Staff ??= await context.Staff.FirstOrDefaultAsync(m => m.Id == Id);

        if (Staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Staff!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StaffExists(Staff!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/staff");
    }

    bool StaffExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Staff.Any(e => e.Id == id);
    }
}
