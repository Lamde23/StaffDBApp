@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Please use the side nav-buttons to view projects</h1>

<p>
	<button @onclick="getStaffData" class="btn btn-primary">Get StaffData</button>
	<button @onclick="clearList" class="btn btn-primary">Clear Data</button>
</p>

<div class="page-size-chooser">
	Items per page:
	<select @bind="@pagination.ItemsPerPage">
		<option>8</option>
		<option>10</option>
		<option>20</option>
	</select>
</div>
<QuickGrid Items="@staffListQueryable" Class="grid" Pagination="@pagination">
	<PropertyColumn Property="staff => staff.FirstName" Title="First Name" Sortable="true"/>
	<PropertyColumn Property="staff => staff.LastName" Title="Last Name" Sortable="true" />
	<PropertyColumn Property="staff => staff.Email" Title="Email" Sortable="true" />
	<PropertyColumn Property="staff => staff.EnrolledDate.ToShortDateString()" Title="Enrolled Date" Sortable="true" />
	<PropertyColumn Property="staff => staff.Active" />
	<PropertyColumn Property="staff => staff.BankAccount" Title="Bank Account" />

	<TemplateColumn Context="staff">
		<a class="btn btn-info">Payments</a> |
		<a class="btn btn-info">Edit</a> |
		<a class="btn btn-danger">Delete</a>
	</TemplateColumn>
</QuickGrid>
<Paginator State="@pagination" />

<div class="col-12 col-md-8 p-4">
	<div class="row">
		<EditForm Model="newStaff" FormName="newStaffForm" OnValidSubmit="insertNewStaff" class="card-header">
			<h3>Input New Staff Data:</h3>
			<DataAnnotationsValidator/>	
			<ValidationSummary/> 
				<div>
					Name:
					<input @bind="newStaff.FirstName" class="form-control"/>
					<ValidationMessage For="@(() => newStaff.FirstName)" />
					Last Name:
				</div>
				<div>
					<input @bind="newStaff.LastName" class="form-control" />
					<ValidationMessage For="@(() => newStaff.LastName)" />
				</div>
				<div>
					Email: 
					<input @bind="newStaff.Email" class="form-control" />
					<ValidationMessage For="@(() => newStaff.Email)" />
				</div>
				<div>
					Enrolled Date:
					<InputDate TValue="DateTime" @bind-Value="newStaff.EnrolledDate" />
				</div>
				<div>
					Active: 
					<InputCheckbox @bind-Value="newStaff.Active" />
				</div>
				<div>
					Bank Account: 
					<input @bind="newStaff.BankAccount" />
					<ValidationMessage For="@(() => newStaff.BankAccount)" />
				</div>
	
			<button type="Submit" class="btn btn-primary">Add Staff</button>
		</EditForm>
	</div>
</div>

@code{
	private List<Staff> staffList = new List<Staff>();
	private Staff newStaff = new Staff();
	private bool isLoading = false;
	IQueryable<Staff> staffListQueryable = Enumerable.Empty<Staff>().AsQueryable();
	PaginationState pagination = new PaginationState { ItemsPerPage = 8 };

	private async Task getStaffData()
	{
		isLoading = true;
		try{
			var response = await Http.GetAsync("staffGet");
			if (response.IsSuccessStatusCode)
			{
				var staffDataResponse = await response.Content.ReadFromJsonAsync<List<Staff>>();
				staffList = staffDataResponse ?? new List<Staff>();
				staffListQueryable = staffList.AsQueryable();

            }
        }
        catch (Exception){ }
        isLoading = false;
    } 

    private async Task insertNewStaff()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("staffInsert", newStaff);
            if (response.IsSuccessStatusCode)
            {
                newStaff = new Staff();
				await getStaffData();
            }
        }
        catch (Exception) { }
    }

	private void clearList(MouseEventArgs e)
	{
		staffList = new();
		staffListQueryable = Enumerable.Empty<Staff>().AsQueryable();
	}
}