@page "/"
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Please use the side nav-buttons to view projects</h1>

<p>
	<button @onclick="getStaffData" class="btn btn-primary">Get StaffData</button>
	<button @onclick="clearList" class="btn btn-primary">Clear Data</button>
</p>

<p>Page results: @result</p>

@if (isLoading)
{
	<label>Loading staff data, please wait...</label>
} 
else if (staffList != null && staffList.Count > 0)
{
<label class="card-header">@staffList.Count staff record(s) retrieved.</label>
	<ul>
		
		@foreach (var staff in staffList)
		{
			<li class="row-cols-1">@staff.FirstName, @staff.LastName, @staff.Email, @staff.EnrolledDate</li>
		}
	</ul>
}

<div class="col-12 col-md-8 p-4">
	<EditForm Model="newStaff" FormName="newStaffForm" OnValidSubmit="insertNewStaff">
		<h3>Input New Staff Data:</h3>
		<DataAnnotationsValidator/>	
		<ValidationSummary/> 
		<div class="row">
			<div>
				<label class="form-label" for="FirstName"> Name:</label>
				<input @bind="newStaff.FirstName" class="form-control"/>
				<ValidationMessage For="@(() => newStaff.FirstName)" />
				Last Name:
				<input @bind="newStaff.LastName" class="form-control" />
				<ValidationMessage For="@(() => newStaff.LastName)" />
			</div>
			<div>
				Email: 
				<input @bind="newStaff.Email" class="form-control" />
				<ValidationMessage For="@(() => newStaff.Email)" />
			</div>
			<div>
				Enrolled Date:
				<InputDate TValue="DateTime" @bind-Value="newStaff.EnrolledDate" />
			</div>
			<div>
				Active: 
				<InputCheckbox @bind-Value="newStaff.Active" />
			</div>
			<div>
				Bank Account: 
				<input @bind="newStaff.BankAccount" />
				<ValidationMessage For="@(() => newStaff.BankAccount)" />
			</div>
		</div>
	
		<button type="Submit" class="btn btn-primary">Add Staff</button>
	</EditForm>
</div>

@code{
	private string result = "result";
	private List<Staff> staffList = new List<Staff>();
	private Staff newStaff = new Staff();
	private bool isLoading = false;
	
	private async Task getStaffData()
	{
		isLoading = true;
		try{
			var response = await Http.GetAsync("staffGet");
			if (response.IsSuccessStatusCode)
			{
				staffList = await response.Content.ReadFromJsonAsync<List<Staff>>();
				result = "Data Loaded";
			}
			else
			{
				result = "Error connecting to data API";
			}
		}
		catch (Exception)
		{
			result = "Unable to load data";
		}
		isLoading = false;
	} 

	private async void insertNewStaff()
	{
		try
		{
			var response = await Http.PostAsJsonAsync("staffInsert", newStaff);
			if (response.IsSuccessStatusCode)
			{
				result = "Staff Added";
				newStaff = new Staff();
				StateHasChanged();
			}
			else
			{
				result = "Error Adding Staff to insert API";
				StateHasChanged();
			}
		}
		catch (Exception)
		{
			result = "Failed to add new staff";		
			StateHasChanged();
		}

	}

	private void clearList(MouseEventArgs e)
	{
		staffList = new();
		result = "Data cleared";
	}
}